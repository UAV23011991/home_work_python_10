import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from info import candy_bot
import random

token = candy_bot.token
bot = Bot(token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)
class Form(StatesGroup):
    all_candys = 200
    max_candys = 28
    start = State()
    step = State()

@dp.message_handler(commands="start", state='*')
async def start_message(message: types.Message):
    markup=types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item1=types.KeyboardButton('game')
    item2=types.KeyboardButton('rules')
    item3=types.KeyboardButton('stop')
    markup.add(item1, item2, item3)
    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! 
üç≠üç≠üç≠ –ú—ã –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å –≤ –∫–æ–Ω—Ñ–µ—Ç—ã üç≠üç≠üç≠
–í—Å–µ–≥–æ –µ—Å—Ç—å {Form.all_candys} –∫–æ–Ω—Ñ–µ—Ç.
–ö–∞–∂–¥—ã–π —Ö–æ–¥ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –Ω–µ –±–æ–ª–µ–µ {Form.max_candys} –∫–æ–Ω—Ñ–µ—Ç.
–ö—Ç–æ –∑–∞–±–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é, —Ç–æ—Ç –∏ –≤—ã–π–≥—Ä–∞–ª!
–ï—Å–ª–∏ –≥–æ—Ç–æ–≤, –Ω–∞–∂–º–∏ 'game'""",reply_markup=markup)
    await Form.start.set()

@dp.message_handler(lambda message: message.text=="rules", state='*')
async def game(message: types.Message):
    await message.answer(f'''–î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä–∏–º:
1. –Ø –∏–≥—Ä–∞—é –ø—Ä–æ—Ç–∏–≤ —Ç–µ–±—è.
2. –£ –Ω–∞—Å {Form.all_candys} –∫–æ–Ω—Ñ–µ—Ç.
3. –•–æ–¥–∏–º –ø–æ –æ—á–µ—Ä–µ–¥–∏.
4. –ë—Ä–∞—Ç—å –º–æ–∂–Ω–æ –º–∞–∫—Å–∏–º—É–º {Form.max_candys} –∫–æ–Ω—Ñ–µ—Ç.
5. –ö—Ç–æ –∑–∞–±–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–Ω—Ñ–µ—Ç—É, —Ç–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –≤—Å—ë.''')
    
@dp.message_handler(lambda message: message.text=="stop", state='*')
async def game(message: types.Message):
    await message.answer('–Ø –µ—â–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –∫–∞–∫ —Ä–µ–∞–ª–∏–∑–≤–∞—Ç—å —ç—Ç—É –≤–µ—Ç–∫—É.')

@dp.message_handler(lambda message: message.text=="game", state=Form.start)
async def game(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['all_candys'] = 200
    await Form.step.set()
    await message.answer('–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç –∑–∞–±–µ—Ä–µ—à—å?')

@dp.message_handler(lambda message: message.text.isdigit(), state=Form.step)
async def user_step(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if int(message.text) > Form.max_candys:
            await message.answer(f'–ù–µ –±–æ–ª—å—à–µ {Form.max_candys}.')
            await Form.step.set()
        elif int(message.text) > data['all_candys']:
            await message.answer(f"–ò—Ö –≤–µ–¥—å –æ—Å—Ç–∞–ª–æ—Å—å {data['all_candys']}.")
            await Form.step.set()
        else:
            data['all_candys'] -= int(message.text)
            if data['all_candys'] == 0:
                await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!!!')
                await message.answer_photo('AgACAgIAAxkBAAIBt2ISVRsf4JprBKEf58UWxKpuiED_AALetjEbAAEskEhIxRW0VTy6RgEAAwIAA3gAAyME')
                await Form.start.set()
            else:
                await Form.step.set()
                await message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å {data['all_candys']} –∫–æ–Ω—Ñ–µ—Ç.")
                bot_choice = data['all_candys'] % (Form.max_candys + 1)
                if bot_choice < 1:
                    bot_choice = random.randint(1, data['all_candys'])
            data['all_candys'] -= bot_choice
            if data['all_candys'] == 0:
                await message.answer('–Ø –∑–∞–±–∏—Ä–∞—é  –≤—Å–µ –∫–æ–Ω—Ñ–µ—Ç—ã)')
                await message.answer_photo('AgACAgIAAxkBAAIBt2ISVRsf4JprBKEf58UWxKpuiED_AALetjEbAAEskEhIxRW0VTy6RgEAAwIAA3gAAyME')
                await Form.start.set()
            else:
                await message.answer(f"""–ú–æ–π —Ö–æ–¥.
{bot_choice}.
–û—Å—Ç–∞–ª–æ—Å—å {data['all_candys']}.""")
    
    
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)